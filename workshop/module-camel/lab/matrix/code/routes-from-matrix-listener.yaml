# camel-k: language=yaml

- route:
    from:
      uri: timer:trigger-matrix-streaming
      parameters:
        repeatCount: 1
      steps:
        - log:
            message: "Opening connection to Matrix..."
        - setHeader:
            name: Authorization
            expression:
              simple:
                expression: Bearer {{matrix.access.token}}
        - to:
            uri: >-
              {{matrix.server.url}}/_matrix/client/v3/sync?filter={ "account_data": { "not_types": [ "*" ] }, "room": { "account_data": { "not_types": [ "*" ] }, "timeline": { "limit": 1, "types": [ "m.room.message", "m.room.member" ], "senders": [ "{{matrix.user}}" ] }, "state": { "not_types": [ "*" ] }, "ephemeral": { "not_types": [ "*" ] } } }
        - log:
            message: "Matrix HTTP Streaming started"
        - loop:
            doWhile: true
            expression:
              simple:
                expression: true
            steps:
              - removeHeaders:
                  pattern: '*'
              - setProperty:
                  name: next_batch
                  expression:
                    jsonpath:
                      expression: $.next_batch
              - setHeader:
                  name: Authorization
                  expression:
                    simple:
                      expression: Bearer {{matrix.access.token}}
              - toD:
                  uri: >-
                    {{matrix.server.url}}/_matrix/client/v3/sync?timeout=10000&filter={ "account_data": { "not_types": [ "*" ] }, "room": { "account_data": { "not_types": [ "*" ] }, "timeline": { "limit": 1, "types": [ "m.room.message", "m.room.member" ], "senders": [ "{{matrix.user}}"  ] }, "state": { "not_types": [ "*" ] }, "ephemeral": { "not_types": [ "*" ] } } }&since=${exchangeProperty.next_batch}&disableStreamCache=true
              - convertBodyTo:
                  type: String
              - setProperty:
                  name: backup-response
                  expression:
                    simple:
                      expression: ${body}
              - when:
                  expression:
                    jsonpath:
                      suppressExceptions: true
                      expression: $['rooms'].join..timeline.events[?(@.type == 'm.room.message')]
                  steps:
                    - to:
                        uri: direct:process-matrix-message-event
              - when:
                  expression:
                    jsonpath:
                      suppressExceptions: true
                      expression: $['rooms'].join..timeline.events[?(@.type == 'm.room.member' && @.content.membership == 'leave')]
                  steps:
                    - to:
                        uri: direct:process-matrix-room-member-leave-event
                    # restore data with next batch for next loop
              - setBody:
                  expression:
                    simple:
                      expression: ${exchangeProperty.backup-response}

- route:
    from:
      uri: direct:process-matrix-message-event
      steps:
        - setHeader:
            name: CamelJsltString
            expression:
              constant:
                expression: >-
                  let event = [for (.rooms.join) .value.timeline.events[0]]
                  let room = [for (.rooms.join) .]

                  {
                    "user": replace($event[0].sender,"@|:(.*)",""),
                    "text": $event[0].content.body,
                    "sent": format-time(replace($event[0].origin_server_ts, "[\\s\\S]{3}\\z", ""), "yyyy-MM-dd'T'HH:mm:ss.SSSX"),
                    "room": $room[0].key
                  }
        - to: "jslt:dummy?allowTemplateFromHeader=true"

        - unmarshal:
            json: {}

        - wire-tap:
            uri: direct:process-agent-message

- route:
    from:
      uri: direct:process-matrix-room-member-leave-event
      steps:
        - log:
            message: "room member leave event detected"
        - setHeader:
            name: CamelJsltString
            expression:
              constant:
                expression: >-
                  let event = [for (.rooms.join) .value.timeline.events[0]]
                  let room = [for (.rooms.join) .]

                  {
                    "user": "replace($event[0].sender,"@|:(.*)","")",
                    "sent": format-time(replace($event[0].origin_server_ts, "[\\s\\S]{3}\\z", ""), "yyyy-MM-dd'T'HH:mm:ss.SSSX"),
                    "room": $room[0].key
                  }
        - to: "jslt:dummy?allowTemplateFromHeader=true"
        - unmarshal:
            json: {}
        - to:
            uri: "direct:process-room-leave-event"
